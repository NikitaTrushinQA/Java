Примитивные типы данных в Java
Название	Что означает	                                                                 Размер
byte	        целые числа от  -128 (-27) до 127 (27-1)	     				 1 байт
short	        целые числа, от -32768 (-215) до 32767 (215-1)	                                 2 байта
int	        целые числа от -2147483648 (-231) до 2147483647 (231-1)	                         4 байта
long		целые числа от -9223372036854775808 (-263) до 9223372036854775807 (263-1)	 8 байт
float		действительные числа примерно от 1,4 * 10-45 до 3,4 * 1038	                 4 байта
double		действительные числа примерно от 4,9 * 10-324  до 1,8 * 10308	                 8 байт
char		символьный тип данных	                                                         2 байта
boolean		значение истина/ложь (true/false)			                         1 байт

                                                                          Тернарный оператор
(<условие>)  ? <значение, если истина> : <значение, если ложь>
Scanner sc = new Scanner(System.in);
int a = sc.nextInt();
int b = sc.nextInt();
System.out.println((a < b) ? a : b);
                                                                          
                                                                    Массивы
double[] a; // объявление массива, содержащего действительные числа
int[] b = new int[20]; // объявление и инициализация массива, содержащего 20 целых чисел
char[] c = {'c', 'a', 't'}; // объявление массива, содержащего символы и его заполнение  
                                                                   
 вывести массив:                                                             
 import java.util.Arrays;
 System.out.println(Arrays.toString(array));
  Если по какой-то причине вас не устраивает такой формат вывода, то либо придется писать свой вариант преобразования, например, через обычный цикл, либо использовать регулярные выражения.
Пример:

int[] nums = {2, 4, 6, 8, 10};
String str = Arrays.toString(nums);
System.out.println(str.replaceAll("\\[|\\]|\\,", ""));
Вывод:
2 4 6 8 10
____
public class Main {

    public static void main(String[] args) {
        Example[] arr = {new Example(), new Example(), new Example()};
        System.out.println(Arrays.toString(arr));
    }
}

class Example {
    int num = 3;
}
Вывод:

[Example@3b22cdd0, Example@1e81f4dc, Example@4d591d15]

Arrays.toString() не отобразил значение поля num для элементов массива. Это связано с тем, что для каждого элемента в одной из строк реализации метода Arrays.toString() вызывается метод valueOf().
Реализация valueOf():

public static String valueOf(Object obj) {
    return (obj == null) ? "null" : obj.toString();
}

Для решения проблемы в Example необходимо переопределить метод toString():

class Example {
    int num = 3;

    public String toString() {
        return "" + num;
    }
}
Вывод:
[3, 3, 3]
____
                                                                   Arrays.sort(a)
Arrays.sort(a) отсортирует массив a в порядке возрастания значений элементов. Если нужно отсортировать в другом порядке, воспользуйтесь методом Arrays.sort(a, Comparator c), где Comparator c — экземпляр класса Comparator, который позволяет сравнивать два соседних элемента.
Пример:
int[] myArray = new int[] { 6, 4, 3, 5 };
Arrays.sort( myArray );
System.out.println( Arrays.toString( myArray ) );

                                                                    Arrays.copyOf()
Данный метод применяется тогда, когда необходимо скопировать элементы массива, начиная с нулевого индекса.
Пример:

int[] srcArr = {1, 2, 3, 4, 5};
int[] destArr = Arrays.copyOf(srcArr, srcArr.length);
Метод Arrays.copyOf() принимает 2 параметра: копируемый массив и количество копируемых значений, которое определяет также длину нового массива. Т. к. мы хотим скопировать массив целиком, то указываем в качестве количества длину исходного массива.
